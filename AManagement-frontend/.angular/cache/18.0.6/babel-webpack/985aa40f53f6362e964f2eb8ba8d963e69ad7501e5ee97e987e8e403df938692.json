{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TestService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = 'http://localhost:8000/api/apartments';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  // Read (Get all apartments)\n  getApartments() {\n    return this.httpClient.get(this.apiUrl);\n  }\n  // Read (Get a single apartment by ID)\n  getApartment(id) {\n    return this.httpClient.get(`${this.apiUrl}/${id}`);\n  }\n  // Create (Add a new apartment)\n  addApartment(apartment) {\n    return this.httpClient.post(this.apiUrl, apartment, this.httpOptions);\n  }\n  // Update (Edit an existing apartment)\n  updateApartment(id, apartment) {\n    return this.httpClient.put(`${this.apiUrl}/${id}`, apartment, this.httpOptions);\n  }\n  // Delete (Remove an apartment)\n  deleteApartment(id) {\n    return this.httpClient.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function TestService_Factory(t) {\n    return new (t || TestService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TestService,\n    factory: TestService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","TestService","constructor","httpClient","apiUrl","httpOptions","headers","getApartments","get","getApartment","id","addApartment","apartment","post","updateApartment","put","deleteApartment","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Auksilyo-01\\Desktop\\AManagement\\AManagement-frontend\\src\\app\\demo\\other\\test\\service\\test.service.ts"],"sourcesContent":["import { HttpClient,HttpHeaders  } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport interface Apartment{\r\n  apartment_id : number;\r\n  apartment_name : string;\r\n  address : string;\r\n  number_of_units :number;\r\n  manager_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TestService {\r\n  private apiUrl = 'http://localhost:8000/api/apartments';\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  // Read (Get all apartments)\r\n  getApartments(): Observable<Apartment[]> {\r\n    return this.httpClient.get<Apartment[]>(this.apiUrl);\r\n  }\r\n\r\n  // Read (Get a single apartment by ID)\r\n  getApartment(id: number): Observable<Apartment> {\r\n    return this.httpClient.get<Apartment>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  // Create (Add a new apartment)\r\n  addApartment(apartment: Apartment): Observable<Apartment> {\r\n    return this.httpClient.post<Apartment>(this.apiUrl, apartment, this.httpOptions);\r\n  }\r\n\r\n  // Update (Edit an existing apartment)\r\n  updateApartment(id: number, apartment: Apartment): Observable<Apartment> {\r\n    return this.httpClient.put<Apartment>(`${this.apiUrl}/${id}`, apartment, this.httpOptions);\r\n  }\r\n\r\n  // Delete (Remove an apartment)\r\n  deleteApartment(id: number): Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAAoBA,WAAW,QAAS,sBAAsB;;;AAkB9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,MAAM,GAAG,sCAAsC;IA6B/C,KAAAC,WAAW,GAAG;MACpBC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EA/B4C;EAE7C;EACAO,aAAaA,CAAA;IACX,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAc,IAAI,CAACJ,MAAM,CAAC;EACtD;EAEA;EACAK,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,IAAIM,EAAE,EAAE,CAAC;EAC/D;EAEA;EACAC,YAAYA,CAACC,SAAoB;IAC/B,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAAY,IAAI,CAACT,MAAM,EAAEQ,SAAS,EAAE,IAAI,CAACP,WAAW,CAAC;EAClF;EAEA;EACAS,eAAeA,CAACJ,EAAU,EAAEE,SAAoB;IAC9C,OAAO,IAAI,CAACT,UAAU,CAACY,GAAG,CAAY,GAAG,IAAI,CAACX,MAAM,IAAIM,EAAE,EAAE,EAAEE,SAAS,EAAE,IAAI,CAACP,WAAW,CAAC;EAC5F;EAEA;EACAW,eAAeA,CAACN,EAAU;IACxB,OAAO,IAAI,CAACP,UAAU,CAACc,MAAM,CAAO,GAAG,IAAI,CAACb,MAAM,IAAIM,EAAE,EAAE,CAAC;EAC7D;EAAC,QAAAQ,CAAA,G;qBA5BUjB,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}